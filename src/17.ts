import sum from "lodash/sum";

import { Memory } from "./05";
import { mkState, execute } from "./09";
import { isProduction, withKeypress } from "./process";

import input from "./17.input.json";

export const gatherOutput = async (code: Memory): Promise<string> => {
  let output = "";

  try {
    await execute(
      mkState(code),
      () => {
        throw new Error("no input possible");
      },
      async n => {
        output += String.fromCharCode(n);
      }
    );
  } catch (e) {}

  return output;
};

const neighbours = (x: number, y: number): Array<[number, number]> => [
  [x + 1, y],
  [x - 1, y],
  [x, y + 1],
  [x, y - 1]
];

const getChar = (lines: Array<string>, x: number, y: number): string =>
  (lines[y] || "").charAt(x);

const isScaffold = (field: string): boolean => field === "#";

export const findIntersections = (data: string): Array<[number, number]> => {
  const lines = data.split("\n");
  let intersections: Array<[number, number]> = [];

  for (let y = 1; y < lines.length - 1; y++) {
    for (let x = 1; x < lines[0].length - 1; x++) {
      if (isScaffold(getChar(lines, x, y))) {
        const isIntersection = neighbours(x, y).every(([nx, ny]) =>
          isScaffold(getChar(lines, nx, ny))
        );

        if (isIntersection) {
          intersections.push([x, y]);
        }
      }
    }
  }

  return intersections;
};

export const scoreIntersections = (
  intersections: Array<[number, number]>
): number => sum(intersections.map(([x, y]) => x * y));

export const task1 = async (): Promise<number> => {
  const output = await gatherOutput(input);

  return scoreIntersections(findIntersections(output));
};

const fulfillsMemoryLimit = (lines: Array<string>): boolean =>
  lines.every(l => l.length <= 20);

/*
  ........................................#############..
  ........................................#...........#..
  ........#######.........................#...........#..
  ........#.....#.........................#...........#..
  ........#.....#.#############...........#...........#..
  ........#.....#.#...........#...........#...........#..
  ........#.....#.#...........#...........#...........#..
  ........#.....#.#...........#...........#...........#..
  ........#############.......#...........#...........#..
  ..............#.#...#.......#...........#...........#..
  ..............#.#.###########.....#######...........#..
  ..............#.#.#.#.............#.................#..
  ..............###########.........#.......###########..
  ................#.#.#...#.........#.......#............
  ................#.#.#...#.........#.......#............
  ................#.#.#...#.........#.......#............
  ................##########^.......#.......#............
  ..................#.#...#.........#.......#............
  ..........###########...#.........#.......#............
  ..........#.......#.....#.........#.......#............
  ..........#.......###########.....#.......#............
  ..........#.............#...#.....#.......#............
  ......###########.......###########.......#############
  ......#...#.....#...........#.........................#
  ......#...#.....#...........#.........................#
  ......#...#.....#...........#.........................#
  ......#...#.....#...........#.........................#
  ......#...#.....#...........#.........................#
  ###########.....#...........#.........................#
  #.....#.........#...........#..........................
  #.....#.........#...........#..........................
  #.....#.........#...........#..........................
  #.....#.........#############..........................
  #.....#................................................
  #######................................................

  ........................................R12345678901R..
  ........................................9...........1..
  ........R12345R.........................8...........2..
  ........5.....1.........................7...........3..
  ........4.....2.R12345678901R...........6...........4..
  ........3.....3.1...........1...........5...........5..
  ........2.....4.0...........2...........4...........6..
  ........1.....5.9...........3...........3...........7..
  ........R10987#54321L.......4...........2...........8..
  ..............7.7...9.......5...........1...........9..
  ..............8.6.L9#7654321R.....R12345L...........0..
  ..............9.5.1.7.............1.................1..
  ..............L1#3#5#789R.........0.......L987654321R..
  ................3.3.5...1.........9.......1............
  ................2.4.4...2.........8.......2............
  ................1.5.3...3.........7.......3............
  ................R9#7#543#1L.......6.......4............
  ..................7.1...5.........5.......5............
  ..........R1234567#9L...6.........4.......6............
  ..........9.......9.....7.........3.......7............
  ..........8.......L12345#789R.....2.......8............
  ..........7.............9...1.....1.......9............
  ......L987#54321L.......L123456789L.......L12345678901R
  ......1...5.....9...........3.........................1
  ......2...4.....8...........4.........................2
  ......3...3.....7...........5.........................3
  ......4...2.....6...........6.........................4
  ......5...1.....5...........7.........................5
  R12345#789L.....4...........8.........................6
  5.....7.........3...........9..........................
  4.....8.........2...........0..........................
  3.....9.........1...........1..........................
  2.....0.........R10987654321R..........................
  1.....1................................................
  R54321R................................................

  A: R6R10L10
  B: L10R12R12
  C: R10L10L12R6
  MAIN: BABCACACBC
  
  L10R12R12R6R10L10L10R12R12R10L10L12R6R6R10L10R10L10L12R6R6R10L10R10L10L12R6L10R12R12R10L10L12R6
*/

export const uncompressed =
  "L,10,R,12,R,12,R,6,R,10,L,10,L,10,R,12,R,12,R,10,L,10,L,12,R,6,R,6,R,10,L,10,R,10,L,10,L,12,R,6,R,6,R,10,L,10,R,10,L,10,L,12,R,6,L,10,R,12,R,12,R,10,L,10,L,12,R,6";
export const a = "R,6,R,10,L,10";
export const b = "L,10,R,12,R,12";
export const c = "R,10,L,10,L,12,R,6";
export const main = "B,A,B,C,A,C,A,C,B,C";

export const task2 = async (useVideo: boolean = false) => {
  const state = mkState(input);
  state.memory[0] = 2;

  const stdInput: Array<string> = `${main}\n${a}\n${b}\n${c}\n${
    useVideo ? "y" : "n"
  }\n`.split("");
  let lastOuput: number = NaN;

  try {
    await execute(
      state,
      async () => {
        const char = stdInput.shift();

        if (char === undefined) {
          throw new Error("input empty");
        }

        return char.charCodeAt(0);
      },
      async n => {
        lastOuput = n;
      }
    );
  } catch (e) {}

  return lastOuput;
};

if (isProduction()) {
  console.log("Hi <3><");
  withKeypress(() => {});
  (async () => {
    const output = await gatherOutput(input);
    console.log(output);
    process.exit(0);
  })();
}
